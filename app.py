# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SlT0j3KxC0_l3fbd_kV_ODRbv8eTrWGq
"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from PIL import Image
import os

# Set page config
st.set_page_config(
    page_title="Pneumonia Detection from Chest X-rays",
    page_icon="ðŸ©º",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

local_css("style.css")

# Load model (cache to avoid reloading)
@st.cache_resource
def load_pneumonia_model():
    try:
        model = load_model('pneumonia_model.keras')
        return model
    except Exception as e:
        st.error(f"Error loading model: {str(e)}")
        return None

model = load_pneumonia_model()

# App header
st.title("ðŸ©º Pneumonia Detection from Chest X-rays")
st.markdown("""
This AI system analyzes chest X-ray images to detect signs of pneumonia.
Upload a chest X-ray image (in JPG or PNG format) for analysis.
""")

# Sidebar
with st.sidebar:
    st.image("https://www.researchgate.net/publication/334749053/figure/fig1/AS:784409535803392@1563991836585/Example-of-chest-X-ray-images-in-our-dataset-Normal-vs-Pneumonia.png",
             width=200)
    st.markdown("""
    ### How it works
    1. Upload a chest X-ray image
    2. The AI analyzes the image
    3. Get results with confidence score
    """)

    st.markdown("""
    ### About
    This model was trained on the [Chest X-Ray Images (Pneumonia) dataset](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia)
    using deep learning architectures.
    """)

# File uploader
uploaded_file = st.file_uploader("Choose a chest X-ray image...", type=["jpg", "jpeg", "png"])

# Prediction functiondef 
predict_pneumonia(image):
    try:
        # Convert to RGB if grayscale (1-channel)
        if image.mode != 'RGB':
            image = image.convert('RGB')
            
        # Preprocess the image
        img = image.resize((128, 128))  # Match model's expected sizing
        img_array = img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array = img_array / 255.0  # Normalize pixel values

        # Make prediction
        prediction = model.predict(img_array)
        confidence = float(prediction[0][0])
        
        # Determine result
        if confidence > 0.5:
            result = "Pneumonia Detected"
            color = "red"
            confidence_percent = confidence * 100
        else:
            result = "Normal (No Pneumonia)"
            color = "green"
            confidence_percent = (1 - confidence) * 100
            
        return result, color, confidence_percent, img
    
    except Exception as e:
        st.error(f"Error processing image: {str(e)}")
        return None, None, None, None

# Display results
if uploaded_file is not None:
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Uploaded Image")
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded X-ray", use_column_width=True)

        # Add disclaimer
        st.warning("""
        **Disclaimer:** This AI tool is for research purposes only.
        Always consult a qualified healthcare professional for medical diagnosis.
        """)

    with col2:
        st.subheader("Analysis Results")

        with st.spinner("Analyzing the X-ray..."):
            result, color, confidence, processed_img = predict_pneumonia(image)

            if result:
                # Display results with colored box
                st.markdown(f"""
                <div style='border: 2px solid {color}; border-radius: 5px; padding: 10px; margin: 10px 0;'>
                    <h3 style='color: {color};'>Result: {result}</h3>
                    <p>Confidence: <b>{confidence:.2f}%</b></p>
                </div>
                """, unsafe_allow_html=True)

                # Show probability distribution
                fig, ax = plt.subplots(figsize=(6, 2))
                ax.barh(['Normal', 'Pneumonia'],
                        [100-confidence, confidence],
                        color=['green', 'red'])
                ax.set_xlim(0, 100)
                ax.set_title('Probability Distribution')
                st.pyplot(fig)

                # Interpretation
                if "Pneumonia" in result:
                    st.error("""
                    **Clinical Note:** This result suggests possible pneumonia.
                    Please consult a radiologist for confirmation and further evaluation.
                    """)
                else:
                    st.success("""
                    **Clinical Note:** No signs of pneumonia detected.
                    However, always consult a doctor if symptoms persist.
                    """)

                # Show processed image (for debugging)
                # st.image(processed_img, caption="Processed Image", use_column_width=True)

# Sample images for testing
st.subheader("Try with Sample Images")
sample_col1, sample_col2, sample_col3 = st.columns(3)

with sample_col1:
    if st.button("Normal Sample"):
        st.session_state.sample_image = "sample_normal.jpeg"

with sample_col2:
    if st.button("Pneumonia Sample (Bacterial)"):
        st.session_state.sample_image = "sample_pneumonia_bacterial.jpeg"

with sample_col3:
    if st.button("Pneumonia Sample (Viral)"):
        st.session_state.sample_image = "sample_pneumonia_viral.jpeg"

# Handle sample image selection
if hasattr(st.session_state, 'sample_image'):
    sample_path = os.path.join("sample_images", st.session_state.sample_image)
    try:
        sample_image = Image.open(sample_path)

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("Sample Image")
            st.image(sample_image, caption=st.session_state.sample_image, use_column_width=True)

        with col2:
            st.subheader("Analysis Results")
            result, color, confidence, _ = predict_pneumonia(sample_image)

            if result:
                st.markdown(f"""
                <div style='border: 2px solid {color}; border-radius: 5px; padding: 10px; margin: 10px 0;'>
                    <h3 style='color: {color};'>Result: {result}</h3>
                    <p>Confidence: <b>{confidence:.2f}%</b></p>
                </div>
                """, unsafe_allow_html=True)

    except Exception as e:
        st.error(f"Error loading sample image: {str(e)}")

# Footer
st.markdown("---")
st.markdown("""
**Note:** This application is intended for research and educational purposes only.
The predictions are not a substitute for professional medical advice, diagnosis, or treatment.
""")
